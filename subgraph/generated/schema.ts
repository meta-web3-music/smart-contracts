// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MusicNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MusicNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MusicNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MusicNFT", id.toString(), this);
    }
  }

  static load(id: string): MusicNFT | null {
    return changetype<MusicNFT | null>(store.get("MusicNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get metaDataUri(): string {
    let value = this.get("metaDataUri");
    return value!.toString();
  }

  set metaDataUri(value: string) {
    this.set("metaDataUri", Value.fromString(value));
  }

  get assetUri(): string {
    let value = this.get("assetUri");
    return value!.toString();
  }

  set assetUri(value: string) {
    this.set("assetUri", Value.fromString(value));
  }

  get advNfts(): Array<string> {
    let value = this.get("advNfts");
    return value!.toStringArray();
  }

  set advNfts(value: Array<string>) {
    this.set("advNfts", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get created(): Array<string> {
    let value = this.get("created");
    return value!.toStringArray();
  }

  set created(value: Array<string>) {
    this.set("created", Value.fromStringArray(value));
  }
}

export class AdvNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdvNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AdvNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AdvNFT", id.toString(), this);
    }
  }

  static load(id: string): AdvNFT | null {
    return changetype<AdvNFT | null>(store.get("AdvNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get musicNFT(): string {
    let value = this.get("musicNFT");
    return value!.toString();
  }

  set musicNFT(value: string) {
    this.set("musicNFT", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get expirationTime(): BigInt {
    let value = this.get("expirationTime");
    return value!.toBigInt();
  }

  set expirationTime(value: BigInt) {
    this.set("expirationTime", Value.fromBigInt(value));
  }

  get expirationDuration(): BigInt {
    let value = this.get("expirationDuration");
    return value!.toBigInt();
  }

  set expirationDuration(value: BigInt) {
    this.set("expirationDuration", Value.fromBigInt(value));
  }

  get metaDataHash(): string {
    let value = this.get("metaDataHash");
    return value!.toString();
  }

  set metaDataHash(value: string) {
    this.set("metaDataHash", Value.fromString(value));
  }

  get assetHash(): string {
    let value = this.get("assetHash");
    return value!.toString();
  }

  set assetHash(value: string) {
    this.set("assetHash", Value.fromString(value));
  }

  get asks(): Array<string> {
    let value = this.get("asks");
    return value!.toStringArray();
  }

  set asks(value: Array<string>) {
    this.set("asks", Value.fromStringArray(value));
  }
}

export class Ask extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ask entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ask must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ask", id.toString(), this);
    }
  }

  static load(id: string): Ask | null {
    return changetype<Ask | null>(store.get("Ask", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get ask_seller(): string {
    let value = this.get("ask_seller");
    return value!.toString();
  }

  set ask_seller(value: string) {
    this.set("ask_seller", Value.fromString(value));
  }

  get ask_sellerFundsRecipient(): string {
    let value = this.get("ask_sellerFundsRecipient");
    return value!.toString();
  }

  set ask_sellerFundsRecipient(value: string) {
    this.set("ask_sellerFundsRecipient", Value.fromString(value));
  }

  get ask_askCurrency(): Bytes {
    let value = this.get("ask_askCurrency");
    return value!.toBytes();
  }

  set ask_askCurrency(value: Bytes) {
    this.set("ask_askCurrency", Value.fromBytes(value));
  }

  get ask_findersFeeBps(): i32 {
    let value = this.get("ask_findersFeeBps");
    return value!.toI32();
  }

  set ask_findersFeeBps(value: i32) {
    this.set("ask_findersFeeBps", Value.fromI32(value));
  }

  get ask_askPrice(): BigInt {
    let value = this.get("ask_askPrice");
    return value!.toBigInt();
  }

  set ask_askPrice(value: BigInt) {
    this.set("ask_askPrice", Value.fromBigInt(value));
  }

  get fullfilled(): boolean {
    let value = this.get("fullfilled");
    return value!.toBoolean();
  }

  set fullfilled(value: boolean) {
    this.set("fullfilled", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }
}
